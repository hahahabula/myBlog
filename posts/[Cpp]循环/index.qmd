---
title: "C++循环"
date: 2025/2/18
categories: [C++]
description: "介绍有关C++循环语句的部分"
---

循环的类型由以下四种：

| 循环类型 | 描述 |
|------------------------------------|------------------------------------|
| while循环 | 当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。 |
| for循环 | 多次执行一个语句序列，简化管理循环变量的代码。 |
| do......while循环 | 除了它是在循环主体结尾测试条件外，其他与 while 语句类似。 |
| 嵌套循环 | 您可以在 while、for 或 do..while 循环内使用一个或多个循环。 |

: 循环类型分类表

# while循环

```c++
int y = 10;
while(y--){
    cout << "Hello!" << endl;
}
```

# for循环

```c++
for(int i = 10; i<20; i++){
    cout << "Hello!" << endl;
}
```

1. init 会首先被执行，且只会执行一次。这一步允许您声明并初始化任何循环控制变量。您也可以不在这里写任何语句，只要有一个分号出现即可。
2. 接下来，会判断 condition。如果为真，则执行循环主体。如果为假，则不执行循环主体，且控制流会跳转到紧接着 for 循环的下一条语句。
3. 在执行完 for 循环主体后，控制流会跳回上面的 increment 语句。该语句允许您更新循环控制变量。该语句可以留空，只要在条件后有一个分号出现即可。
4. 条件再次被判断。如果为真，则执行循环，这个过程会不断重复（循环主体，然后增加步值，再然后重新判断条件）。在条件变为假时，for 循环终止。

# do......while循环
do......while循环能至少保证执行一次循环

```c++
int y = 10;
do{
    cout << "Hello!" << endl;
}while(y--)
```

# 循环控制语句
循环控制语句更改执行的正常序列。当执行离开一个范围时，所有在该范围中创建的自动对象都会被销毁。C++ 提供了下列的控制语句。

## break语句
C++ 中 break 语句有以下两种用法：

- 当 break 语句出现在一个循环内时，循环会立即终止，且程序流将继续执行紧接着循环的下一条语句。
- 它可用于终止 switch 语句中的一个 case。
如果您使用的是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。

## continue语句

- C++ 中的 continue 语句有点像 break 语句。但它不是强迫终止，continue 会跳过当前循环中的代码，强迫开始下一次循环。
- 对于 for 循环，continue 语句会导致执行循环增量和条件测试部分。对于 while 和 do...while 循环，continue 语句会导致程序控制回到条件测试上。

## goto语句
将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。goto 语句一个很好的作用是退出深嵌套例程。

```c++
for(...) {
   for(...) {
      while(...) {
         if(...) goto stop;
         .
         .
         .
      }
   }
}
stop:
cout << "Error in program.\n";
```