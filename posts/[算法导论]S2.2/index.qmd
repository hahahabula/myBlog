---
title: "S1.2 算法分析"
date: 2025/2/12
categories: [算法, 《算法导论》]
description: "以插入排序算法为例介绍如何计算算法的运行时间"
---

分析算法主要度量的是计算时间，在算法分析中假定一种通用的单处理计算模型-**随机访问器(random-access machine, RAM)**来作为实现的技术，算法可以通过计算机程序来实现。在RAM模型中，指令一条接一条地执行，没有并发操作。在设计算法是应当采取真实计算机时如何设计的，RAM就如何设计的准则，即RAM模型包括计算机中的常见指令：

-   算术指令：如加法、减法、乘法、除法、取余、向下取整、向上取整；
-   数据移动指令：装入、存储、复制；
-   控制指令：条件与无条件转移、子程序调用与返回。

# 插入排序算法分析

1.  `输入规模`的最佳概念依赖于研究的问题，在插入排序算法中是指待排序数组的规模 $n$。
2.  一个算法在特定输入上的`运行时间`是指执行的基本操作数或步数，假定第i行的每次执行时间都是常量时间。

![插入排序算法的运行时间图](images/paste-1.png){fig-align="center" width="365"}

-   上图中的$t_j$表示对那个值第5行执行while循环测试的次数。
-   `for`循环的本质上是**判断+递增/递减**，因此for循环会执行$n$次，即使到了$A.length$还会再循环一次进行判断而结束。

总运行时间如下：

$$
T(n)=c_1 n+(c_2+c_4)(n-1)+c_5\sum_{j=2}^nt_j+c_6\sum_{j=2}^n(t_j-1)+c_7\sum_{j=2}^n(t_j-1)+c_8(n-1)
$$

## 最好情况

当循环到第 $i$ 个元素时，最好情况就是其前元素小于它，则无需进入while循环直接来到第 $i+1$ 个元素，也即是有如下总运行时间：

$$
\begin{aligned}
T(n)&= c_1 n+(c_2+c_4)(n-1)+c_5(n-1)+c_8(n-1)\\
&=(c_1+c_2+c_4+c_5+c_8)n-(c_2+c_4+c_5+c_8)
\end{aligned}
$$

也即最好情况的运行时间是 $n$ 的线性函数。

## 最坏的情况

最坏的情况是值每循环到第 $i$ 个元素时，其前子序列均大于它，它需要插入到1的位置，则有 $\sum_{j=2}^nt_j=2+3+\ldots+n=\frac{(n-1)(n+2)}{2}$（第2个元素只需要交换一次但是 $t_j$ 包括while的判断），则总运行时间为：

$$
\begin{aligned}
T(n)&=c_1n+c_2(n-1)+c_4(n-1)+c_5(\frac{n(n+1)}{2}-1)+c_6(\frac{n(n-1)}{2})\\
&+c_7(\frac{n(n-1)}{2})+c_8(n-1)\\
&=a_1n^2+a_2n+a_3
\end{aligned}
$$

即最坏情况的运行时间是 $n$ 的二次函数。

# 最坏情况与平均情况分析

在算法分析中往往仅关注**最坏情况**运行时间，其原因如下：

-   一个算法的最坏情况运行时间给出了任何输入的运行时间的一个上界；
-   对于某些算法，最坏情况经常出现；

# 增长量级

为了对运行时间进一步抽象便提出增长率/增长量级，其只考虑公式中最重要的项，例如插入排序具有最坏情况运行时间 $\Theta(n^2)$