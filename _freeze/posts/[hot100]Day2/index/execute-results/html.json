{
  "hash": "af443ad064e391bcb6932d95e26b2106",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Day2\"\ndate: 2025/02/24\ncategories: [算法, 刷题]\ndescription: \"线性表中有关数组的搜索旋转排序数组、\"\n---\n\n\n# 搜索旋转排序数组\n\n![](images/paste-1.png)\n\n::: callout-note\n# 分析\n\n1.  要求时间复杂度为 $\\Theta(\\log(n))$，目前已知二分查找的复杂度符合\n2.  旋转排序数组的特征是从某个位置切下后两边都为有序数组，而从其他位置切下时将会得到一个有序一个无序。\n:::\n\n::: panel-tabset\n# 伪代码\n\n``` pseudocode\n\\begin{algorithm}\n\\caption{searchRotated(A, target)}\n\\begin{algorithmic}\n\\State first = 0, last = A.length - 1\n\\While{first <= last}\n    \\State mid = $\\lfloor first + (last - first)/2 \\rfloor$  \\Comment{计算中间索引}\n    \\If{A[mid] == target}\n        \\State \\Return mid  \\Comment{如果中间值等于目标值，返回索引}\n    \\EndIf\n    \\If{A[first] <= A[mid]}\n        \\If{A[first] <= target \\And target < A[mid]}\n            \\State last = mid - 1  \\Comment{目标值在左侧有序子数组中}\n        \\Else\n            \\State first = mid + 1  \\Comment{目标值在右侧子数组中}\n        \\EndIf\n    \\Else\n        \\If{A[mid] < target \\And target <= A[last]}\n            \\State first = mid + 1  \\Comment{目标值在右侧有序子数组中}\n        \\Else\n            \\State last = mid - 1  \\Comment{目标值在左侧子数组中}\n        \\EndIf\n    \\EndIf\n\\EndWhile\n\\State \\Return -1  \\Comment{未找到目标值，返回-1}\n\\end{algorithmic}\n\\end{algorithm}\n```\n\n# Python\n\n::: {#4825fd59 .cell execution_count=1}\n``` {.python .cell-code}\nfrom typing import List\ndef searchRotated(A: List[int], target: int) -> int:\n    import math\n    first = 0\n    last = len(A) - 1\n    while first <= last:\n        mid = math.floor(first+(last-first)/2)\n        if A[mid]==target:\n            return mid\n        if A[first]<=A[mid]:\n            if A[first]<=target and A[mid]>target:\n                last = mid - 1\n            else:\n                first = mid + 1\n        else:\n            if A[mid]<target and A[last]>=target:\n                first = mid + 1\n            else:\n                last = mid - 1\n    return -1\n```\n:::\n\n\n# C++\n\n``` cpp\nint searchRotated(vector<int>& nums, int target){\n    int first = 0, last = nums.size() - 1;\n    while (first<=last){\n        int mid = first + (last - first) / 2;\n        if (nums[mid]==target){\n            return mid;\n        }        \n        if (nums[first]<=nums[mid]){\n            if (nums[first]<=target && nums[mid]>target){\n                last = mid - 1;\n            }\n            else first = mid + 1;\n        }\n        else{\n            if (nums[mid]<target && nums[last]>=target){\n                first = mid + 1;\n            }\n            else last = mid - 1;\n        }\n    }\n    return -1;\n}\n```\n:::\n\n# 搜索旋转排序数组Ⅱ\n\n![](images/paste-2.png)\n\n::: {.callout-note}\n# 分析\n该问题与上一个问题的区别在于元素可重复，元素可重复并没有改变当从数组中间切一刀时将会得到一个有序的子数组和一个无序的子数组的事实，但是会造成无法通过`A[first]<=A[mid]`来判断是否为有序数列如`[1,3,1,1,1]`，因此需要修改。\n- 若`A[first]<A[mid]`，则必可说明`A[first..mid]`为有序数组。\n- 若`A[first]>A[mid]`，则必可说明`A[first..mid]`为无序数组，`A[mid..last]`为有序数组。\n- 若`A[first]=A[mid]`，则可通过`first=first+1`的形式避免这种情况，由于mid处和first处值一致因此直接删除first处的值也无碍。\n:::\n\n::: panel-tabset\n# 伪代码\n```pseudocode\n\\begin{algorithm}\n\\caption{searchRotated2(nums, target)}\n\\begin{algorithmic}\n\\State $first \\gets 0$\n\\State $last \\gets \\text{length}(nums) - 1$\n\\While{$first \\leq last$}\n    \\State $mid \\gets \\lfloor first + \\frac{(last - first)}{2} \\rfloor$\n    \\If{$nums[mid] = target$}\n        \\State \\Return true\n    \\EndIf\n    \\If{$nums[first] < nums[mid]$}\n        \\If{$nums[first] \\leq target \\And target < nums[mid]$}\n            \\State $last \\gets mid - 1$\n        \\Else\n            \\State $first \\gets mid + 1$\n        \\EndIf\n    \\ElsIf{$nums[first] > nums[mid]$}\n        \\If{$nums[mid] < target \\And nums[last] \\geq target$}\n            \\State $first \\gets mid + 1$\n        \\Else\n            \\State $last \\gets mid - 1$\n        \\EndIf\n    \\Else\n        \\State $first \\gets first + 1$\n    \\EndIf\n\\EndWhile\n\\State \\Return $false$\n\\end{algorithmic}\n\\end{algorithm}\n```\n# Python\n\n::: {#e9de60dd .cell execution_count=2}\n``` {.python .cell-code}\nfrom typing import List\ndef searchRotated(A: List[int], target: int) -> int:\n    import math\n    first = 0\n    last = len(A) - 1\n    while first <= last:\n        mid = math.floor(first+(last-first)/2)\n        if A[mid]==target:\n            return True\n        if A[first]<A[mid]:\n            if A[first]<=target and A[mid]>target:\n                last = mid - 1\n            else:\n                first = mid + 1\n        elif A[first]>A[mid]:\n            if A[mid]<target and A[last]>=target:\n                first = mid + 1\n            else:\n                last = mid - 1\n        else:\n            first += 1\n    return False\n```\n:::\n\n\n```C++\nbool search(vector<int>& nums, int target) {\n        int first = 0, last = nums.size() - 1;\n        while (first<=last){\n            int mid = first + (last - first) / 2;\n            if (nums[mid]==target){\n                return true;\n            }        \n            if (nums[first]<nums[mid]){\n                if (nums[first]<=target && nums[mid]>target){\n                    last = mid - 1;\n                }\n                else first = mid + 1;\n            }\n            else if (nums[first]>nums[mid]){\n                if (nums[mid]<target && nums[last]>=target){\n                    first = mid + 1;\n                }\n                else last = mid - 1;\n            }\n            else first++;\n        }\n        return false;\n    }\n```\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}